generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataproxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Gym {
  id            String    @id @default(cuid())
  created_by_id String
  created_by    User      @relation(fields: [created_by_id], references: [id])
  name          String
  address       String
  image_url     String?
  site          String?
  problems      Problem[]
}

model Problem {
  id            String   @id @default(cuid())
  gym_id        String
  gym           Gym      @relation(fields: [gym_id], references: [id], onDelete: Cascade)
  created_by_id String
  created_by    User     @relation("creator", fields: [created_by_id], references: [id])
  setter_id     String?
  setter        User?    @relation("setter", fields: [setter_id], references: [id])
  date          DateTime
  image_url     String
  color         String
  gym_grade     String
  hold_type     String?
  wall_type     String?
  style         String?
  sends         Send[]
  likes         Like[]
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String
  magic_key        String?
  sends            Send[]
  likes            Like[]
  setted_problems  Problem[] @relation("setter")
  setted_gyms      Gym[]
  created_problems Problem[] @relation("creator")
}

model Send {
  problem_id String
  problem    Problem  @relation(fields: [problem_id], references: [id], onDelete: Cascade)
  user_id    String
  sender     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  date       DateTime
  grade      Int
  attempts   String

  @@id([problem_id, user_id])
}

model Like {
  problem_id String
  problem    Problem @relation(fields: [problem_id], references: [id], onDelete: Cascade)
  user_id    String
  user       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([problem_id, user_id])
}
